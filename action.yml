name: 'Pull from Lokalise'
description: GitHub action to download translation files from Lokalise TMS to your GitHub repository in the form of a pull request.
author: 'Lokalise Group, Ilya Krukowski'
inputs:
  api_token:
    description: 'API token for Lokalise with read/write permissions'
    required: true
    secret: true
  project_id:
    description: 'Project ID for Lokalise'
    required: true
  base_lang:
    description: 'Base language (e.g., en, fr_FR)'
    required: true
    default: 'en'
  translations_path:
    description: 'Paths to translation files'
    required: true
    default: |
      locales
  file_format:
    description: 'Format of the translation files (e.g., json). Find all supported file formats at https://developers.lokalise.com/reference/api-file-formats'
    required: true
    default: 'json'
  file_ext:
    description: 'Custom file extension to use when searching for translation files (without leading dot). By default, the extension is inferred from the file_format value. However, for certain formats (e.g., json_structured), the downloaded files may still have a generic extension (e.g., .json). In such cases, this parameter allows specifying the correct extension manually to ensure proper file matching.'
    required: false
    default: ''
  additional_params:
    description: 'Additional parameters for Lokalise CLI on pull. Find all supported options at https://github.com/lokalise/lokalise-cli-2-go/blob/main/docs/lokalise2_file_download.md'
    required: false
    default: ''
  temp_branch_prefix:
    description: 'Prefix for the temp branch to create pull request'
    required: false
    default: 'lok'
  always_pull_base:
    description: 'By default, changes in the base language translation files are ignored. Set this to true to include base language translations in the PR.'
    required: false
    default: 'false'
  flat_naming:
    description: 'Use flat naming convention (true/false). If true, expects files like locales/en.json instead of locales/en/file.json'
    required: false
    default: 'false'
  skip_include_tags:
    description: 'Skip setting the include-tags argument during download. This will download all translation keys for the specified format, regardless of tags.'
    required: false
    default: 'false'
  skip_original_filenames:
    description: "Skips setting the --original-filenames and --directory-prefix arguments during download. By default, the action enables --original-filenames=true and sets a directory-prefix to /. When --original-filenames is set to false, all translation keys are exported into a single file per language, and --directory-prefix has no effect."
    required: false
    default: 'false'
  pr_labels:
    description: 'Comma-separated list of labels to apply to the created pull request'
    required: false
    default: ''
  max_retries:
    description: 'Maximum number of retries on rate limit errors'
    required: false
    default: 3
  sleep_on_retry:
    description: 'Number of seconds to sleep before retrying'
    required: false
    default: 1
  download_timeout:
    description: 'Timeout for the download operation (in seconds)'
    required: false
    default: 120
  async_mode:
    description: 'Use async mode for translations download'
    required: false
    default: 'false'
  os_platform:
    description: 'Target platform for the binary (linux_amd64, linux_arm64, mac_amd64, mac_arm64)'
    required: false
    default: 'linux_amd64'
  git_user_name:
    description: 'Git username to set in git config. If not provided, defaults to GitHub actor.'
    required: false
    default: ''
  git_user_email:
    description: 'Git email to set in git config. If not provided, uses "<username>@users.noreply.github.com".'
    required: false
    default: ''
  git_commit_message:
    description: 'Git commit message used. If not provided, defaults to "Translations update".'
    required: false
    default: 'Translations update'
  custom_github_token:
    description: 'Optional GitHub token to use for API operations instead of the default GITHUB_TOKEN. Useful for custom permissions or elevated scopes.'
    secret: true
    required: false
    default: ''
  override_branch_name:
    description: 'Optional static branch name to use instead of auto-generating one. Useful when you want to reuse the same PR.'
    required: false
    default: ''
  force_push:
    description: 'Force push changes to the remote branch (overwrites history). Use with caution. Defaults to false.'
    required: false
    default: 'false'

permissions:
  contents: write
  pull-requests: write
branding:
  icon: 'download-cloud'
  color: 'orange'

outputs:
  created_branch:
    description: 'The branch that was created and used for the pull request'
    value: ${{ steps.create-commit.outputs.branch_name }}
  pr_created:
    description: 'A boolean value specifying whether the pull request with translation updates has been created'
    value: ${{ steps.check-pr-created.outputs.pr_created }}
  pr_number:
    description: 'Number of the created pull request'
    value: ${{ steps.create-update-pr.outputs.pr_number }}
  pr_id:
    description: 'ID of the created pull request'
    value: ${{ steps.create-update-pr.outputs.pr_id }}

runs:
  using: "composite"
  steps:
    - name: Install Lokalise CLIv2
      # lokalise/install-lokalise-cli-v2@v1.2.1
      uses: lokalise/install-lokalise-cli-v2@9785b791b01cc6043a00aefa41aa28583e4d969a
      with:
        target-version: 3.1.4

    - name: Pull translation files from Lokalise
      id: pull-files
      shell: bash
      env:
        CLI_ADD_PARAMS: ${{ inputs.additional_params }}
        MAX_RETRIES: ${{ inputs.max_retries }}
        SLEEP_TIME: ${{ inputs.sleep_on_retry }}
        FILE_FORMAT: ${{ inputs.file_format }}
        FILE_EXT: ${{ inputs.file_ext }}
        TRANSLATIONS_PATH: "${{ inputs.translations_path }}"
        BASE_LANG: "${{ inputs.base_lang }}"
        ALWAYS_PULL_BASE: "${{ inputs.always_pull_base }}"
        FLAT_NAMING: "${{ inputs.flat_naming }}"
        DOWNLOAD_TIMEOUT: "${{ inputs.download_timeout }}"
        SKIP_INCLUDE_TAGS: "${{ inputs.skip_include_tags }}"
        SKIP_ORIGINAL_FILENAMES: "${{ inputs.skip_original_filenames }}"
        PLATFORM: "${{ inputs.os_platform }}"
        ASYNC_MODE: "${{ inputs.async_mode }}"
      run: |
        set -euo pipefail

        echo "Downloading translation files from Lokalise..."
        
        CMD_PATH="${{ github.action_path }}/bin/lokalise_download_${PLATFORM}"
        if [ ! -f "$CMD_PATH" ]; then
          echo "Error: Binary for platform '${PLATFORM}' not found!"
          exit 1
        fi
        chmod +x "$CMD_PATH"
        "$CMD_PATH" "${{ inputs.project_id }}" "${{ inputs.api_token }}" || {
          echo "Error: lokalise_download script failed with exit code $?"
          exit 1
        }

        echo "Download complete! Detecting changed files..."

        CMD_PATH="${{ github.action_path }}/bin/detect_changed_files_${PLATFORM}"
        if [ ! -f "$CMD_PATH" ]; then
          echo "Error: Binary for platform '${PLATFORM}' not found!"
          exit 1
        fi
        chmod +x "$CMD_PATH"
        "$CMD_PATH" || {
          echo "Error: detect_changed_files script failed with exit code $?"
          exit 1
        }

    - name: Commit changes
      id: create-commit
      if: steps.pull-files.outputs.has_changes == 'true'
      env:
        FILE_FORMAT: ${{ inputs.file_format }}
        FILE_EXT: ${{ inputs.file_ext }}
        TRANSLATIONS_PATH: "${{ inputs.translations_path }}"
        BASE_LANG: "${{ inputs.base_lang }}"
        ALWAYS_PULL_BASE: "${{ inputs.always_pull_base }}"
        FLAT_NAMING: "${{ inputs.flat_naming }}"
        TEMP_BRANCH_PREFIX: "${{ inputs.temp_branch_prefix }}"
        PLATFORM: "${{ inputs.os_platform }}"
        GIT_USER_NAME: "${{ inputs.git_user_name }}"
        GIT_USER_EMAIL: "${{ inputs.git_user_email }}"
        GIT_COMMIT_MESSAGE: "${{ inputs.git_commit_message }}"
        OVERRIDE_BRANCH_NAME: "${{ inputs.override_branch_name }}"
        FORCE_PUSH: "${{ inputs.force_push }}"
      shell: bash
      run: |
        set -euo pipefail

        echo "Commiting changes..."

        CMD_PATH="${{ github.action_path }}/bin/commit_changes_${PLATFORM}"
        if [ ! -f "$CMD_PATH" ]; then
          echo "Error: Binary for platform '${PLATFORM}' not found!"
          exit 1
        fi

        chmod +x "$CMD_PATH"
        "$CMD_PATH" || {
          echo "Error: commit_changes script failed with exit code $?"
          echo "has_changes=false" >> $GITHUB_OUTPUT
          exit 1
        }

        echo "Changes have been commited!"

    - name: Create or Update Pull Request
      if: steps.pull-files.outputs.has_changes == 'true' && steps.create-commit.outputs.commit_created == 'true'
      env:
        BRANCH_NAME: ${{ steps.create-commit.outputs.branch_name }}
        BASE_REF: ${{ github.ref_name }}
        PR_LABELS: ${{ inputs.pr_labels }}
      id: create-update-pr
      # actions/github-script@v7.0.1
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
      with:
        github-token: ${{ inputs.custom_github_token || github.token }}
        result-encoding: string
        script: |
          const path = require('path');
          const createOrUpdatePR = require(path.join(process.env.GITHUB_ACTION_PATH, 'js/create-update-pr.js'));
          const result = await createOrUpdatePR({ github, context });
          core.setOutput('pr_created', result.created);
          core.setOutput('pr_number', result.pr.number);
          core.setOutput('pr_id', result.pr.id);
          return result.created;

    - name: Verify PR created
      id: check-pr-created
      shell: bash
      run: |
        echo "Verifying created PR..."
        if [ "${{ steps.create-update-pr.outputs.pr_created }}" != "true" ]; then
          echo "Failed to create PR."
          echo "pr_created=false" >> $GITHUB_OUTPUT
        else
          echo "PR has been created."
          echo "pr_created=true" >> $GITHUB_OUTPUT
        fi