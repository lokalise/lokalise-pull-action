name: 'Pull from Lokalise'
description: GitHub action to download translation files from Lokalise TMS to your GitHub repository in the form of a pull request.
author: 'Lokalise Group, Ilya Krukowski'
inputs:
  api_token:
    description: 'API token for Lokalise with read/write permissions'
    required: true
    secret: true
  project_id:
    description: 'Project ID for Lokalise'
    required: true
  base_lang:
    description: 'Base language (e.g., en, fr_FR)'
    required: true
    default: 'en'
  translations_path:
    description: 'Paths to translation files'
    required: true
    default: |
      locales
  file_format:
    description: 'Format of the translation files (e.g., json). Find all supported file formats at https://developers.lokalise.com/reference/api-file-formats'
    required: true
    default: 'json'
  additional_params:
    description: 'Additional parameters for Lokalise CLI on pull. Find all supported options at https://github.com/lokalise/lokalise-cli-2-go/blob/main/docs/lokalise2_file_download.md'
    required: false
    default: ''
  temp_branch_prefix:
    description: 'Prefix for the temp branch to create pull request'
    required: false
    default: 'lok'
  always_pull_base:
    description: 'By default, changes in the base language translation files are ignored. Set this to true to include base language translations in the PR.'
    required: false
    default: false
  flat_naming:
    description: 'Use flat naming convention (true/false). If true, expects files like locales/en.json instead of locales/en/file.json'
    required: false
    default: false
  max_retries:
    description: 'Maximum number of retries on rate limit errors'
    required: false
    default: 3
  sleep_on_retry:
    description: 'Number of seconds to sleep before retrying'
    required: false
    default: 1
  download_timeout:
    description: 'Timeout for the download operation (in seconds)'
    default: 120
    required: false
permissions:
  contents: write
  pull-requests: write
branding:
  icon: 'download-cloud'
  color: 'orange'

runs:
  using: "composite"
  steps:
    - name: Install Lokalise CLIv2
      uses: bodrovis/install-lokalise-cli-v2@v1.0.2

    - name: Pull translation files from Lokalise
      id: pull-files
      shell: bash
      env:
        CLI_ADD_PARAMS: ${{ inputs.additional_params }}
        MAX_RETRIES: ${{ inputs.max_retries }}
        SLEEP_TIME: ${{ inputs.sleep_on_retry }}
        FILE_FORMAT: ${{ inputs.file_format }}
        TRANSLATIONS_PATH: "${{ inputs.translations_path }}"
        BASE_LANG: "${{ inputs.base_lang }}"
        ALWAYS_PULL_BASE: "${{ inputs.always_pull_base }}"
        FLAT_NAMING: "${{ inputs.flat_naming }}"
        DOWNLOAD_TIMEOUT: "${{ inputs.download_timeout }}"
      run: |
        set -e
        
        CMD_PATH="${{ github.action_path }}/bin/lokalise_download"
        chmod +x "$CMD_PATH"
        "$CMD_PATH" "${{ inputs.project_id }}" "${{ inputs.api_token }}" || {
          echo "Error: lokalise_download script failed with exit code $?"
          exit 1
        }

        CMD_PATH="${{ github.action_path }}/bin/detect_changed_files"
        chmod +x "$CMD_PATH"
        "$CMD_PATH" || {
          echo "Error: detect_changed_files script failed with exit code $?"
          exit 1
        }

    - name: Commit changes
      id: create-commit
      if: steps.pull-files.outputs.has_changes == 'true'
      env:
        FILE_FORMAT: ${{ inputs.file_format }}
        TRANSLATIONS_PATH: "${{ inputs.translations_path }}"
        BASE_LANG: "${{ inputs.base_lang }}"
        ALWAYS_PULL_BASE: "${{ inputs.always_pull_base }}"
        FLAT_NAMING: "${{ inputs.flat_naming }}"
        TEMP_BRANCH_PREFIX: "${{ inputs.temp_branch_prefix }}"
      shell: bash
      run: |
        set -e

        CMD_PATH="${{ github.action_path }}/bin/commit_changes"
        chmod +x "$CMD_PATH"
        $("$CMD_PATH") || {
          echo "Error: commit_changes script failed with exit code $?"
          echo "has_changes=false" >> $GITHUB_OUTPUT
          exit 1
        }

    - name: Create or Update Pull Request
      if: steps.pull-files.outputs.has_changes == 'true' && steps.create-commit.outputs.commit_created == 'true'
      env:
        BRANCH_NAME: ${{ steps.create-commit.outputs.branch_name }}
        BASE_REF: ${{ github.ref_name }}  
      uses: actions/github-script@v7
      with:
        github-token: ${{ github.token }}
        script: |
          const path = require('path');
          const createOrUpdatePR = require(path.join(process.env.GITHUB_ACTION_PATH, 'js/create-update-pr.js'));
          await createOrUpdatePR({ github, context });